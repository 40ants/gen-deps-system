#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  (ql:quickload '(defmain fset cl-strings)
                :silent t))


(defpackage :ros.script.gen-deps-system
  (:use :cl)
  (:import-from #:defmain
                #:defmain
                #:print-help))
(in-package :ros.script.gen-deps-system)


;; https://github.com/quicklisp/quicklisp-client/issues/134
;; https://www.reddit.com/r/Common_Lisp/comments/82wiyt/how_to_collect_all_asdf_dependencies_for/

(defun get-dependencies (system)
  (labels ((normalize (name)
             (etypecase name
               (null) ;; Name can be a nil. In this case we have to return it as is.
               (string (string-downcase name))
               (symbol (normalize (symbol-name name)))
               (list
                (let ((dep-type (first name))
                      (supported-dep-types (list :version :feature :require)))
                  (unless (member dep-type
                                  supported-dep-types)
                    (error "This component \"~A\" should have first element from this list: ~A."
                           name
                           supported-dep-types))
                  
                  (normalize
                   (case dep-type
                     (:version (second name))
                     ;; Dependencies which depends on some
                     ;; features are only collected if this feature is
                     ;; present in the current Lisp. This was, using
                     ;; get-dependencies in different Lisps can return
                     ;; different sets of dependencies.
                     (:feature (when (member (second name)
                                             *features*)
                                 (third name)))
                     (:require (second name)))))))))
    
    (let ((processed (fset:set))
          (queue (fset:set (normalize system))))
      
      (do ((current-name (fset:arb queue)
                         (fset:arb queue)))
          ((null current-name)
           ;; return result
           processed)

        ;; Remove current name from the queue
        (setf queue
              (fset:less queue current-name))
        ;; And put it into the "processed" pool
        (setf processed
              (fset:with processed current-name))
        
        ;; And add it's dependencies which aren't processed or in the queue already
        ;; Sometimes system can't be found because itself depends on some feature,
        ;; for example, you can specify dependency as a list:
        ;; (:FEATURE :SBCL (:REQUIRE :SB-INTROSPECT))
        ;; and it will be loaded only on SBCL.
        ;; When we are collecting dependencies on another implementation,
        ;; we don't want to fail with an error because ASDF is unable to find
        ;; such dependencies
        (let* ((system (handler-bind ((asdf:system-out-of-date
                                        (lambda (c)
                                          (declare (ignorable c))
                                          (invoke-restart 'continue)))
                                      (asdf:bad-system-name
                                        (lambda (c)
                                          (declare (ignorable c))
                                          (muffle-warning))))
                         (asdf:find-system current-name)))
               (deps (when system
                       (asdf:component-sideway-dependencies system))))
          (dolist (dep deps)
            (let ((normalized-dep (normalize dep)))
              (unless (or
                       ;; If it is null, then this dependency should be skipped
                       ;; because it depends on a missing feature.
                       (null normalized-dep)
                       (fset:lookup processed normalized-dep)
                       (fset:lookup queue normalized-dep))
                (setf queue
                      (fset:with queue normalized-dep)))))))

      (values processed))))


(defun real-main (system)
  (let* ((deps-system-name (format nil "~A-deps" system))
         (filename (format nil "~A.asd" deps-system-name))
         (deps (get-dependencies system))
         (deps (fset:convert 'list deps))
         (deps (sort deps #'string<))
         (deps (remove-if (lambda (name)
                            (cl-strings:starts-with name
                                                    system))
                          deps)))
    (format t "System: ~A, filename: ~A~%" system filename)
    
    (alexandria:with-output-to-file (s filename
                                       :if-exists :supersede)
      (let ((*print-pretty* t)
            (*print-miser-width* 10))
        (prin1 `(defsystem ,deps-system-name
                  :class :package-inferred-system
                  :depends-on (,@deps))
              
               s)))))


(defmain main (&rest system)
  "Generates an asd file with a system depending on all dependencies of the given Common Lisp system."
  (if system
      (real-main (first system))
      (print-help)))

;;; vim: set ft=lisp lisp:
